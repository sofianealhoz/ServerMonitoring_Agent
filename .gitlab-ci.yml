image: devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/agent/image_ci

stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:
  stage: build
  image: docker:19.03-git
  services:
    - docker:dind

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

  script:
   - echo "Building Docker image..."
   - echo $DOCKER_REGISTRY_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin
#   - echo $CI_REGISTRY_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin registry.gitlab.com
   - docker build -t devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/agent:$CI_COMMIT_REF_SLUG .
   - docker push devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/agent:$CI_COMMIT_REF_SLUG

  only:
   - main

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  before_script:
   - python --version ; pip --version  # For debugging
   - pip install virtualenv
   - virtualenv venv
   - source venv/bin/activate
   - python3 -m venv .venv
   - source .venv/bin/activate
   - echo "> Installing requirements"
   - pip install -r requirements.dev.txt
   - pip install pytest flake8 psutil coverage apache-log-parser
  script:
    - echo "Running unit tests...."
    - pytest
    - echo "Tests done."

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  before_script:
    - python --version ; pip --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python3 -m venv .venv
    - source .venv/bin/activate
    - echo "> Installing requirements"
    - pip install -r requirements.dev.txt
    - pip install pytest flake8 psutil coverage apache-log-parser
  script:
    - echo "Linting code..."
    - flake8 ./src
    - echo "No lint issues found."

code-coverage-job:
  stage: test

  before_script:
    - python --version ; pip --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python3 -m venv .venv
    - source .venv/bin/activate
    - echo "> Installing requirements"
    - pip install -r requirements.dev.txt
    - pip install pytest flake8 psutil coverage apache-log-parser
  script:
    - echo "Code Coverage of the code..."
    - coverage run -m pytest src/tests/
    - coverage report --include=src/*
    - echo "Code Coverage finished."

deploy-job:
  stage: deploy
  image: docker:latest
  environment: production
  script:
    - echo "Tests success."
    - echo "Deploying project..."
    - 'which ssh-agent || ( apk add openssh-client )' # Install SSH client if not present
    - eval $(ssh-agent -s) # Start the SSH agent
    - echo "$SSH_PRIVATE_KEY" | ssh-add - # Add the SSH key stored in $SSH_PRIVATE_KEY
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts # Add your server to known hosts
    - ssh grudu@karadoc.telecomste.net -p 22103  "docker pull devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/agent/mon_app:$CI_COMMIT_REF_SLUG" # Pull the Docker image on your server
    - ssh grudu@karadoc.telecomste.net -p 22103  "docker run -d -p 8080:8000 devops.telecomste.fr:5050/printerfaceadmin/2023-24/group1/agent/mon_app:$CI_COMMIT_REF_SLUG" # Run the Docker image on your server
    #- docker run -i -p 8080:8000 image_runner
    # Il faut se connecter au serveur, (possibilit√© de mettre des secrets sur Gitlab) puis lancer le docker run -i ... DANS LE SERVEUR.
    # "scp -P 22103 imageAgent.tar grudu@karadoc.telecomste.net:/home/grudu"


